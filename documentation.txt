-> it is Node.js library that provide a high level api control and automation 
-> it is developed by chrome team at google and use as scraping ,automation testing etc 
-> it support headless and head mode while running 
-> it is integrayed with popular testing famework like jest and mocha 

---> Installation = "npm install puppeteer"

@ to takr a ss of google landing page 
const puppeteer = require("puppeteer");

(async () => {
  try {
    const browser = await puppeteer.launch({headless:false});// if i want to see browser open
    const page = await browser.newPage(); // to open newpage 
    await page.goto('https://google.com'); //to open that url
    await page.screenshot({path: 'google.png'}); // to take ss of that 
    (await browser).close();//close 
  }
catch(err){console.log(err);

}}
)();******use of empty colum


@ scraping h1  element in yahoo and buid a pdf of that page 


const puppeteer = require("puppeteer");


async function run(){
  // to launch the browser intance 

  const browser = await puppeteer.launch ({headless:false});// always us await function with puppeteer because we have wait before run this 
  const page = await browser.newPage();
  await page.goto("https://yahoo.com");
  const title = await page.title();// to bring out the title of the web page 
  console.log(title);
  const heading = await page.$eval('p',(element) => element.TextContent);// $eval if it funtion to evaluat the web page and do some task 
  await page.pdf({path:'google1.pdf',format:'A4'}); //use to get pdf 
  await browser.close();

     

}
run();


@ Customize launch options: pass an option as an argument to launch() method to 
 Customize the behavior of browser

 const option = {
    executablepath //path to browser executable
    headless //run the browser in headess mode (true) or display the browser window (false)
    slowMo //delay (in milliseconds) betwen puppeteer operators
    defaultVeiwport {with:22.height:23}// set a custom Veiwport size for browser
    aegs ['--no-sandbox','--disable-setuid-sandbox'],//array of default command-line argumet to pass to tha browser 
    ignoreDefaultArugs [--disable-extention]//array of default command- line argument to exclude
    userDataDir //path to tha user data directoy of president browser state 
    ignoreHttpsErrors :false// ignore https ignore Https Errors during navigation 
    handleSIGIT: true // close the browser when receving a SIGINT singnal (cntrl+c)
    handleSIGTERT: true // close the browser when receving a SIGTERM singnal 
    handleSIGHUP: true // close the browser when receving a SIGHUP singnal
    timeout: 0 // maximum time in milliseconds to wait for the instance to start
    dimpio : fALSE ,//whether to pipe the browser process stdout and stderr to the parnet process
    env:{} // enviernmment variable to passed to browser process
    devtolls: false // ehather to auto-open devtool panel for eah tab
    

@ Navigation  & Extract form web page 

  const puppeteer = require("puppeteer");

async function run(){
    const browser = await puppeteer.launch({headless:false});
    const page = await browser.newPage();

    //navigate to page 
    await page.goto("https://google.com");
    // extract image from web page 
    const image = await page.$$eval("img",(elements) =>
        elements.map((elements) =>({
            src: elements.src,
            alt: elements.alt,
        }))
    );

    // extract link
    const links = await page.$$eval("a",(elements) =>
        elements.map((elements) => ({
        href: elements.href,
        text: elements.textContent,
    }))
    );
    const imageCount = image.lenght;
    const linksCount = links.lenght;

    // output of the above
    const output = JSON.stringify({image, links, imageCount, linksCount});
     console.log(output);

    // close the browser
    await browser.close();
}

run();


@ scrap seo data 
   const puppeteer = require("puppeteer");
  const fs = require("fs");

  async function  run() {
   const browser = await puppeteer.launch({headless:false});
   const page = await browser.newPage();
    // navigate 
    await page.goto("https://yahoo.com");
    
    // SEO related data 
    const title = await page.title();
    const metaDescription = await page.$eval('meta[name="description"]' , (element) => element.textContent);
    const metaKeywords = await page.$eval('meta[name="keywords"]',(element) => element.textContent); 

    //extract links
    const links = await page.$$eval("a",(elements) =>
        elements.map((elements) => ({
        href: elements.href,
        text: elements.textContent,
    }))
    );
    const linksCount = links.length;

    // output
    const outputData ={
        title,
        metaDescription,
        metaKeywords,
        links,
        linksCount,
    };

    // json into string
    const outputJSON = JSON.stringify(outputData);

    // write the file
    fs.writeFileSync("output.json", outputJSON);

    await browser.close();

  }

  run();

@ generating PDF

const puppeteer = require("puppeteer");
 
async function generatePDF(url,outputfile){
    try {
        // launch browsser
        const browser = await puppeteer.launch({headless: false});
        const page = await browser.newPage();
        await page.goto("https://google.com");

        //generate pdf
        await page.pdf({path:outputfile,format:'A4'});

        //close browser
        await browser.close();


    }
    catch(err){
        console.log(err);

    }
}
const url = "https://google.com";
const outputfile = "output.pdf"

generatePDF(url,outputfile);

@ generateScreeshot
const puppeteer = require("puppeteer");
 async function generateScreeshot(url,outputPath) {


    try {
        const browser = await puppeteer.launch({headless:false});
        const page = await browser.newPage();

        await page.goto(url);
         await page.screenshot({path:outputPath});
        
         await browser.close();
         console.log('Screenshot is genrated successfully');

    }
    catch(err){
        console.log("unable to take");
    }
    
 }

 const url = "https://google.com";
 const outputPath = "google-ss.png";

 generateScreeshot(url,outputPath);

@ getting sourse code of website
const puppeteer =require("puppeteer");
const fs = require("fs");

async function getSourceCode(url,outputData){
    try{
        const browser = await puppeteer.launch({headless:false});
        const page = await browser.newPage();

        await page.goto(url);
        
        const sourceCode = await page.content();

        fs.writeFileSync(outputData,sourceCode,"utf-8");

        await browser.close()
         console.log("successfully executed");


    }
     catch(er){
        console.log("not executed");

     }
}

const url =" https://google.com";
const outputData = "source-code.html";
 getSourceCode(url,outputData);

@interceptRequest in website

const puppeteer = require("puppeteer");

async function interceptRequest(url){
    try {
        const browser = await puppeteer.launch({headless:false});
        const page = await browser.newPage();
        await page.setRequestInterception(true);

    // logic for intercept
    page.on('request', (interceptRequest) => {
        if (
            interceptRequest.url().endsWith('.png')){
                interceptRequest.abort();
                console.log("request abort");

            }
        else{
            interceptRequest.headers({'secretKet':'abc123'});
            interceptRequest.continue();
            console.log("request continued wiht header");
        }
    });
    
    await page.goto(url);
    await browser.close();
}
catch(err){
    console.log("error");
}

}
interceptRequest('https://yahoo.com')

@ set viwepoint
const puppeteer = require("puppeteer");

async function simulateMobileDevice() {
    const browser = await puppeteer.launch({headless:false});
    const page = await browser.newPage();

    await page.setUserAgent('Mozilla/5.0 (iphone; cpu  iphone os 11_0 like mac OS X 10');
    await page.setViewport({width:140,height:1200});
    await page.goto("https://yahoo.com");

    await browser.close();

    
}

simulateMobileDevice();

@ emulater using puppeteer

const puppeteer = require('puppeteer');
const Device = puppeteer.KnownDevices['iPhone 13 Pro'];  // Replace with a valid device name

(async () => {
    const browser = await puppeteer.launch({headless: false});
    const page = await browser.newPage();

    await page.emulate(Device);
    await page.goto('https://yahoo.com');

    await page.screenshot({path: 'iphone13.png'});

    await browser.close();
})();

@ coverage of CSS
 const puppeteer = require('puppeteer');

(async () => {
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();

    await Promise.all([
        page.coverage.startJSCoverage(),
        page.coverage.startCSSCoverage()
    ]);

    await page.goto('https://example.com');

    const [JSCoverage, cssCoverage] = await Promise.all([
        page.coverage.stopJSCoverage(),
        page.coverage.stopCSSCoverage()
    ]);

    let totalBytes = 0;
    let usedBytes = 0;

    for (const entry of cssCoverage) {
        totalBytes += entry.text.length;
        for (const range of entry.ranges) {
            usedBytes += range.end - range.start;
        }
    }

    console.log('Total Bytes:', totalBytes);
    console.log('Used Bytes:', usedBytes);

    await browser.close();
})();

@ disable javasript

const puppeteer = require('puppeteer');
 
async function disableJavascript(url){
    try{
        const browser = await puppeteer.launch({headless:false});
        console.log("js disabled");
        const page = await browser.newPage();


        // Disable javascript
        await page.setJavaScriptEnabled(false);
        await page.goto(url);

        //perform some operation
        await browser.close();
    }
    catch(e){
        console.log('error',e)
    }
}
disableJavascript('https://example.com')

@ highlighting the link in web page

 const puppeteer = require('puppeteer');
 async function highlightLinks(url) {

    try {
        const browser = await puppeteer.launch({headless:false});
        const page = await browser.newPage();

        await page.goto(url);

        await page.screenshot({path: 'visualpage.png'});
         await page.evaluate(()  =>{
            const link = document.querySelectorAll('a');

            link.forEach(link => {
                link.style.border = '2xp solid red';
                link.style.backgroundColor = "yellow";
            });

            });
         await page.screenshot({path:'updatelink.png'});
         await browser.close();
        
    }

    catch(e){
        console.log('unable to do');
    }
    
 }
 highlightLinks('https://example.com');

 @ check broken link
 const puppeteer = require('puppeteer');
 async function checkBrokenlinks(url) {
    
    try{
        const browser = await puppeteer.launch({headless:false});
        const page = await browser.newPage(url);

        await page.goto(url);
        
        const links = await page.$$eval('a', anchor => anchor.map(a => a.href));

        const Brokenlinks = [];
        
        for(const link of links){
            const response = await page.goto(link,{waitUntil:'networkidle0',timeout:5000});
            if(response.status() >= 4000){
                Brokenlinks.push({link, status: response.status});
                console.log("broken links",Brokenlinks);
                await browser.close();            }

            }}
            
            catch(e){
                console.log('unsble to check ',e);

            }
        
 }

 checkBrokenlinks('https://example.com');

@ finding the element using puppeteer
const puppeteer = require("puppeteer");

async function checkElementPresent(url, elements) {
    try {
        const browser = await puppeteer.launch({ headless: false });
        const page = await browser.newPage();

        await page.goto(url);

        const presenceResults = {};

        for (const element of elements) {
            const foundElements = await page.$$(element);
            presenceResults[element] = foundElements.length > 0;
        }

        console.log("Element presence results:", presenceResults);
        await browser.close();
    } catch (e) {
        console.log("Unable to check element in URL:", e);
    }
}

const elements = [".header", "#main-content", "footer"];
checkElementPresent('https://google.com', elements);

@ extract and prese sitemaping
const puppeteer = require('puppeteer');
const asios = require("axios");
const {parseStringPromise} = require("xml2js");
const fs = require("fs");
const { default: axios } = require('axios');

async function extactDataFromSitemap(sitemapURL){
    try{

        const reponse = await axios.get(sitemapURL);
        const sitemap = reponse.data;
        console.log(sitemap);

    }
    catch(e){
        console.log("unable to find");
    }
}

const sitemapURL = 'https://yoast.com/page-sitemap.xml';
extactDataFromSitemap(sitemapURL);

@   const puppeteer = require('puppeteer');
const asios = require("axios");
const {parseStringPromise} = require("xml2js");
const fs = require("fs");
const { default: axios } = require('axios');

async function extactDataFromSitemap(sitemapURL){
    try{

        const reponse = await axios.get(sitemapURL);
        const sitemap = reponse.data;

        const parsedXML = await parseStringPromise(sitmap);
        const url = parsedXML.urlset.url.map(url=> url.loc[0];)
        
        console.log(sitemap);

    }
    catch(e){
        console.log("unable to find");
    }
}

const sitemapURL = 'https://yoast.com/page-sitemap.xml';
extactDataFromSitemap(sitemapURL);
@ navigation using puppeteer
const puppeteer = require("puppeteer");

(async () => {
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();

    await page.goto("https://yahoo.com");
    await page.goto("https://finance.yahoo.com");

    await page.goBack();
    // operation here
    const title = await page.title();  // Changed `:` to `;`
    console.log(title);

    await page.goForward();
    await browser.close();
})();
@ to set geological location
const puppeteer = require("puppeteer");

(async () =>{
    const browser = await puppeteer.launch({headless:false});

const page = await browser.newPage();

const latitude = 37.344;
const longitude = 122.324;
await page.browserContext().overridePermissions('https;//example.com', ['geolocation']);
await page.setGeolocation({latitude,longitude});
await page.goto('https://example.com');
await  page.screenshot({path: 'geological.png'}
);
await browser.close();
})();